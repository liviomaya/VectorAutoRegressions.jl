"""
    NormalInvWishart(b, Œ©, Œ®, d)

Object with parameters for a Normal-Inverse-Wishart distribution:

    Œ£ ‚àº ùêºùëä(Œ®; d)
    Œ≤|Œ£ ‚àº ùëÅ(b, Œ£ ‚äó Œ©)
"""
struct NormalInvWishart
    b::Vector{Float64}
    Œ©::Matrix{Float64}
    Œ®::Matrix{Float64}
    d::Float64
end

"""
    N = setniw(b, Œ©, Œ®, d)

Build a `NormalInvWishart` distribution object.
"""
setniw(b, Œ©, Œ®, d) = NormalInvWishart(vect(b), mat.([Œ©, Œ®])..., float(d))

"""
    R, N = size(niw::NormalInvWishart)

### Output

- `R::Int64`: length of `Œ≤`

- `N::Int64`: size of `Œ£`
"""
function size(niw::NormalInvWishart)
    R = length(niw.b)
    N = size(niw.Œ®, 1)
    return R, N
end
size(niw::NormalInvWishart, i::Int64) = size(niw)[i]

"""
    Œ≤, Œ£ = mean(niw::NormalInvWishart)
"""
function mean(niw::NormalInvWishart)
    Œ£ = niw.Œ® / (niw.d - size(niw.Œ®, 1) - 1)
    Œ≤ = niw.b
    return Œ≤, Œ£
end

"""
    Œ≤, Œ£ = mode(niw::NormalInvWishart)
"""
function mode(niw::NormalInvWishart)
    Œ£ = niw.Œ® / (niw.d + size(niw.Œ®, 1) + 1)
    Œ≤ = niw.b
    return Œ≤, Œ£
end


"""
    Œ≤, Œ£ = rand(niw::NormalInvWishart)

Draw a random element from the Normal-Inverse-Wishart distribution parameterized by `niw`.
"""
function rand(niw::NormalInvWishart)

    # draw Œ£
    sigmadist = InverseWishart(niw.d, niw.Œ®)
    Œ£ = rand(sigmadist)

    # draw Œ≤
    betadist = MvNormal(niw.b, kron(Œ£, niw.Œ©))
    Œ≤ = rand(betadist)

    return Œ≤, Œ£
end

function logpdf(Œ≤::Vector{Float64}, Œ£::Matrix{Float64}, niw::NormalInvWishart)

    # draw Œ£
    sigmadist = InverseWishart(niw.d, niw.Œ®)
    sigmaterm = Distributions.logpdf(sigmadist, Œ£)

    # draw Œ≤
    betadist = MvNormal(niw.b, kron(Œ£, niw.Œ©))
    betaterm = Distributions.logpdf(betadist, Œ≤)

    density = sigmaterm + betaterm
    return density
end



# ------------------------------------------------------------------
# BAYESIAN MULTIVARIATE LINEAR REGRESSION
# ------------------------------------------------------------------

function logmvgamma(a, N)
    logŒì = loggamma(a)
    for n in 2:N
        logŒì += ((n - 1) / 2) * log(pi) + loggamma(a + (1 - n) / 2)
    end
    return logŒì
end

"""
    posterior = bayesreg(y, x, prior; intercept::Bool=true)

Compute the posterior distribution of the Bayesian multivariate linear regression. The model is

        y‚Çú = B x‚Çú + œµ‚Çú
        œµ‚Çú ‚àº ùëÅ(0, Œ£)

The conjugate `prior` is a Normal-Inverse-Wishart distribution.

        Œ£    ‚àº ùêºùëä(Œ®; d)
        Œ≤|Œ£  ‚àº ùëÅ(b, Œ£ ‚äó Œ©)
        
where `Œ≤ = vec(B')`. `Œ©` captures prior covariance between coefficients of the same equation.

The `posterior` is also a Normal-Inverse-Wishart distribution.
"""
function bayesreg(y::VecOrMat{U},
    x::VecOrMat{J},
    prior::NormalInvWishart;
    intercept::Bool=true) where {U<:Real,J<:Real}

    # ensure sizes are consistent
    nlh = size(y, 2)
    T, nind = size(x)
    nrh = nind + intercept
    Rprior, Nprior = size(prior)
    @assert Rprior == nlh * nrh
    @assert Nprior == nlh

    b0 = prior.b
    Œ©0 = prior.Œ©
    Œ®0 = prior.Œ®
    d0 = prior.d
    B0 = reshape(b0, nrh, nlh)

    # prior: 
    #       Œ£ ‚àº ùêºùëä(Œ®0, d0)
    #       Œ≤|Œ£ ‚àº ùëÅ(b0, Œ£ ‚äó Œ©0)

    # add intercept to x, if necessary
    if intercept
        X = [ones(T) x]
    else
        X = x
    end

    # Normal component N(b, Œ£ ‚äó Œ©)
    # invŒ©0 = diagm(0 => 1 ./ diag(Œ©0))
    invŒ©0 = inv(Œ©0)
    Œ© = inv(X' * X + invŒ©0) |> makehermitian
    B = Œ© * (X' * y + invŒ©0 * B0)
    b = B[:]

    # Inverse-Wishart Component: ùêºùëä(Œ®, d)
    e = y .- X * B
    ee = e' * e
    eqparcov = (B .- B0)' * invŒ©0 * (B .- B0)
    d = d0 + T
    Œ® = Œ®0 .+ ee + eqparcov |> makehermitian

    # posterior distribution
    posterior = setniw(b, Œ©, Œ®, d)

    # calculate marginal
    # DŒ© = sqrt.(Œ©0)
    # DŒ® = sqrt.(inv(Œ®0))
    DŒ© = Matrix(cholesky(Œ©0).L)
    DŒ® = Matrix(cholesky(inv(Œ®0)).L)
    # aux1 = LinearAlgebra.Symmetric(DŒ©' * X' * X * DŒ©)
    # aux2 = LinearAlgebra.Symmetric(DŒ®' * (ee + eqparcov) * DŒ®)
    aux1 = DŒ©' * X' * X * DŒ©
    aux2 = DŒ®' * (ee + eqparcov) * DŒ®
    eig1 = eigen(aux1).values
    eig2 = eigen(aux2).values
    marginal = -(nlh * T / 2) * log(pi)
    marginal += logmvgamma((T + d0) / 2, nlh) - logmvgamma(d0 / 2, nlh)
    marginal += -(T / 2) * log(det(Œ®0))
    marginal += -(nlh / 2) * sum(log.(1 .+ eig1))
    marginal += -((T + d0) / 2) * sum(log.(1 .+ eig2))

    #= inefficient calculation of marginal
    marg2 = -(nlh * T / 2) * log(pi)
    marg2 += logmvgamma((T + d0) / 2, nlh) - logmvgamma(d0 / 2, nlh)
    marg2 += -(nlh / 2) * log(det(Œ©0))
    marg2 += (d0 / 2) * log(det(Œ®0))
    marg2 += -(nlh / 2) * log(det(X' * X + inv(Œ©0)))
    marg2 += -((T + d0) / 2) * log(det(Œ®))
    =#

    return marginal, posterior
end


